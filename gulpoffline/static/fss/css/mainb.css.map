{"version":3,"sources":["mainb.scss","breakpoint/_breakpoint.scss"],"names":[],"mappings":"AAAQ,oCAAA,CACA,iCAAA,CAGR,GACC,gEAAA,CACA,aAAA,CC0DG,yBD5DJ,GAME,gEAAA,CAEA,aAAA,CAAA,CCoDE,0BD5DJ,GAaE,qDAAA,CACA,gBAAA,CACA,aAAA,CACA,iBAAA,CAEA,QACC,gBAAA,CACA,aAAA,CACA,kBAAA,CAED,UACC,aAAA,CACA,SAAA,CAIA,WAAA,CACA,WAAA,CACA,8BAAA,CACA,iBAAA,CACA,eAAA,CACA,YAAA,CACA,YAAA,CACA,kBAEC,8BAAA,CAEA,UAAA,CACA,aAAA,CACA,iBAAA,CACA,MAAA,CACA,QAAA,CACA,YAAA,CACA,YAAA,CACA,yDAAA,CAED,gCAEC,SAAA,CACA,gDACC,UAAA,CACA,kCAAA,CAAA,0BAAA,CACA,uBAAA,CAAA","file":"mainb.css","sourcesContent":["@import url(\"/fss/commons/css/common.css\");\r\n@import url(\"/fss/fss/css/default.css\");\r\n@import \"base/variables\"; //환경 설정\r\n@import \"../../fss/scss/breakpoint/breakpoint\"; //반응형 플러그인\r\n#w {\r\n\tbackground: url(/fss/img/03_main_B_mobile.jpg) center 0 no-repeat;\r\n\theight: 5406px;\r\n\t@include breakpoint(max-width 400px) {\r\n\t}\r\n\t@include breakpoint(768px) {\r\n\t\tbackground: url(/fss/img/02_main_B_tablet.jpg) center 0 no-repeat;\r\n\r\n\t\theight: 4951px;\r\n\t}\r\n\t@include breakpoint($md) {\r\n\t}\r\n\t@include breakpoint(1440px+40) {\r\n\t\tbackground: url(/fss/img/mainb.png) center 0 no-repeat;\r\n\t\tmin-width: 1440px+40;\r\n\t\theight: 3700px;\r\n\t\tpadding-top: 752px;\r\n\r\n\t\t.set {\r\n\t\t\tmax-width: 1440px;\r\n\t\t\tmargin: 0 auto;\r\n\t\t\tpadding-left: 332px;\r\n\t\t}\r\n\t\ta.link {\r\n\t\t\tdisplay: block;\r\n\t\t\topacity: 0;\r\n\t\t\t// margin-top: 752px;\r\n\t\t\t// margin-left: ;\r\n\t\t\t// background-color: #f00;\r\n\t\t\twidth: 277px;\r\n\t\t\theight: 60px;\r\n\t\t\ttransition: all 0.3s ease-in-out;\r\n\t\t\tposition: relative;\r\n\t\t\toverflow: hidden;\r\n\t\t\twidth: 1133px;\r\n\t\t\theight: 224px;\r\n\t\t\t&::before {\r\n\t\t\t\t// transform: translate(0,-10%);\r\n\t\t\t\ttransition: all 0.6s ease-in-out;\r\n\r\n\t\t\t\tcontent: \"\";\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\ttop: 60px;\r\n\t\t\t\twidth: 1133px;\r\n\t\t\t\theight: 224px;\r\n\t\t\t\tbackground: url(/fss/img/menu_02_on.png) 0 -35px no-repeat;\r\n\t\t\t}\r\n\t\t\t&:hover,\r\n\t\t\t&:focus {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\t&::before {\r\n\t\t\t\t\tcontent: \"\";\r\n\t\t\t\t\ttransform: translate(0, 0%);\r\n\t\t\t\t\tbackground-position: 0 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"settings\";\n@import 'context';\n@import 'helpers';\n@import 'parsers';\n@import 'no-query';\n\n@import 'respond-to';\n\n@import \"legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n"]}